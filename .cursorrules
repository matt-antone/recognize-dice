# D6 Dice Recognition for Raspberry Pi 3 - Project Intelligence

## Hardware Constraints (Critical)
- **Raspberry Pi 3**: ARM Cortex-A53 @ 1.2GHz, 1GB RAM only
- **Performance targets**: 3-5 FPS (not 5-15 like Pi 4)
- **Memory limit**: <800MB total application footprint
- **Resolution**: 320x320 (reduced from 640x640 for Pi 3)

## Key Architecture Decisions

### Performance Optimizations for Pi 3
- Frame skipping (process every 2nd frame by default)
- Tkinter instead of PyQt5 (lighter memory footprint)
- Aggressive model quantization required (INT8)
- No frame buffering - stream processing only
- Single-threaded processing to avoid overhead

### Camera Interface Strategy
- Dual compatibility: picamera2 (modern) with picamera (legacy) fallback
- Automatic detection and graceful degradation
- Pi 3 specific warm-up and configuration

### Model Strategy
- TensorFlow Lite with heavy quantization essential
- Fallback to simple CV (HoughCircles) when model unavailable
- Based on nell-byler/dice_detection but requires significant optimization

## Project Structure Patterns

### Memory Bank System
- Complete documentation in memory-bank/ directory
- Essential for context between sessions due to memory resets
- Always read ALL memory bank files at start of ANY task

### Module Organization
```
src/
├── camera/     # Pi camera interface with fallback support
├── detection/  # TensorFlow Lite + fallback CV detection
├── gui/        # Lightweight Tkinter interface
└── utils/      # Config, logging, performance monitoring
```

### Configuration Pattern
- Single Config class handles all Pi 3 optimizations
- Dynamic performance adjustment based on FPS/thermal
- Validation of required files and settings

## Development Workflow

### Testing Strategy
1. Always test camera first: `python3 test_camera.py`
2. Check dependencies before main app
3. Monitor thermal/memory during development
4. Test on actual Pi 3 hardware (not simulation)

### Performance Monitoring
- Built-in FPS tracking and thermal monitoring
- Automatic frame skipping adjustment
- Memory usage tracking critical for Pi 3

### Error Handling Philosophy
- Graceful degradation everywhere
- Fallback methods for critical components
- Never crash on single component failure

## Known Challenges & Solutions

### Pi 3 Specific Issues
- **Memory pressure**: Use streaming, no buffering
- **CPU thermal**: Monitor /sys/class/thermal/thermal_zone0/temp
- **Frame rate**: Accept 3-5 FPS as normal, optimize for this

### Camera Compatibility
- Multiple Pi camera versions exist
- picamera2 vs picamera library differences
- Handle both RGB888 and RGBA formats

### Model Integration
- Reference model needs TensorFlow Lite conversion
- Heavy quantization required for Pi 3 performance
- Fallback CV must provide reasonable placeholder

## User Experience Priorities

### Pi 3 User Expectations
- Startup time: <15 seconds acceptable
- Response time: <300ms detection latency OK
- Memory usage: Must stay under 800MB
- Reliability over speed

### GUI Design for Pi 3
- Minimal, lightweight Tkinter interface
- Reduced display resolution (480x360 max)
- Essential information only
- Performance stats visible

## Integration with Reference Project

### From nell-byler/dice_detection
- SSD MobileNet architecture basis
- Labelmap format: ???/one/two/three/four/five/six
- TensorFlow model conversion required
- Adaptation needed for Pi 3 constraints

### Model Conversion Process
1. Extract model from reference project
2. Convert to TensorFlow Lite
3. Apply INT8 quantization
4. Test on Pi 3 hardware
5. Adjust input resolution if needed

## Critical Success Factors

### For Pi 3 Viability
- Memory management is everything
- Thermal management essential
- Frame skipping/dynamic adjustment required
- Fallback methods must work well

### Development Efficiency
- Always read memory bank before starting work
- Test on real Pi 3 hardware early and often
- Monitor performance continuously
- Document Pi 3 specific patterns

### User Adoption
- Make it "just work" despite Pi 3 limitations
- Clear performance expectations
- Good error messages and troubleshooting
- Easy setup process

## Future Enhancement Priorities
1. Model optimization for Pi 3
2. Better fallback detection algorithms
3. Advanced thermal management
4. Multiple dice tracking improvements

Remember: This project's success depends on embracing Pi 3 limitations rather than fighting them. Optimize for the hardware you have, not the hardware you wish you had. 